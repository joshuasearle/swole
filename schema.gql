# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

union AddExerciseToWorkoutResult = DuplicateWorkoutExercise | InvalidRepAmount | InvalidSetAmount | Unauthorized | WorkoutExercise

type AlreadyLoggedIn {
  message: String!
}

union ChangeExerciseInWorkoutResult = ExerciseDoesNotExist | ExerciseNotInWorkout | InvalidRepAmount | InvalidSetAmount | Unauthorized | WorkoutDoesNotExist | WorkoutExercise

union ChangeExerciseNameResult = Exercise | ExerciseDoesNotExist | NotLoggedIn

union ChangeWorkoutNameResult = NotLoggedIn | Workout | WorkoutDoesNotExist

union CreateExerciseResult = DuplicateExerciseName | Exercise | NotLoggedIn

union CreateWorkoutResult = DuplicateWorkoutName | NotLoggedIn | Workout

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

union DeleteExerciseResult = ExerciseDeleteSuccess | ExerciseDoesNotExist | NotLoggedIn

union DeleteSelfResult = DeleteSelfSuccess | NotLoggedIn

type DeleteSelfSuccess {
  message: String!
}

union DeleteWorkoutResult = NotLoggedIn | WorkoutDeleteSuccess | WorkoutDoesNotExist

type DuplicateExerciseName {
  name: String!
}

type DuplicateWorkoutExercise {
  message: String!
  workoutExercise: WorkoutExercise!
}

type DuplicateWorkoutName {
  name: String!
}

type EmailAlreadyExists {
  email: String!
}

type Exercise {
  id: ID!
  name: String!
  sets: [Set!]!
}

type ExerciseDeleteSuccess {
  id: ID!
}

type ExerciseDoesNotExist {
  message: String!
}

type ExerciseNotInWorkout {
  exercise: Exercise!
  workout: Workout!
}

type InvalidLoginCredentials {
  message: String!
}

type InvalidRepAmount {
  message: String!
}

type InvalidSetAmount {
  message: String!
}

union LoginResult = AlreadyLoggedIn | InvalidLoginCredentials | User

union LogoutResult = NotLoggedIn | User

union MeResult = NotLoggedIn | User

type Mutation {
  addExerciseToWorkout(exerciseId: ID!, maxReps: Int!, minReps: Int!, sets: Int!, workoutId: ID!): AddExerciseToWorkoutResult!
  changeExerciseInWorkout(exerciseId: ID!, maxReps: Int!, minReps: Int!, sets: Int!, workoutId: ID!): ChangeExerciseInWorkoutResult!
  changeExerciseName(id: ID!, name: String!): ChangeExerciseNameResult!
  changeWorkoutName(id: ID!, name: String!): ChangeWorkoutNameResult!
  createExercise(name: String!): CreateExerciseResult!
  createWorkout(name: String!): CreateWorkoutResult!
  deleteExercise(id: ID!): DeleteExerciseResult!
  deleteSelf: DeleteSelfResult!
  deleteWorkout(id: ID!): DeleteWorkoutResult!
  login(email: String!, password: String!): LoginResult!
  logout: LogoutResult!
  register(email: String!, password: String!): RegisterResult!
  removeExerciseFromWorkout(exerciseId: ID!, workoutId: ID!): RemoveExerciseFromWorkoutResult!
}

type NotLoggedIn {
  message: String!
}

type Query {
  me: MeResult!
}

union RegisterResult = EmailAlreadyExists | User

union RemoveExerciseFromWorkoutResult = ExerciseDoesNotExist | ExerciseNotInWorkout | RemoveExerciseFromWorkoutSuccess | Unauthorized | WorkoutDoesNotExist

type RemoveExerciseFromWorkoutSuccess {
  id: ID!
}

type Set {
  created: DateTime!
  exercise: Exercise!
  id: ID!
  reps: Int!
  rpe: Int!
  weight: Int!
}

type Unauthorized {
  message: String!
}

type User {
  email: String!
  exercises: [Exercise!]!
  id: ID!
  sets: [Set!]!
  workouts: [Workout!]!
}

type Workout {
  id: ID!
  name: String!
  workoutExercises: [WorkoutExercise!]!
}

type WorkoutDeleteSuccess {
  id: ID!
}

type WorkoutDoesNotExist {
  message: String!
}

type WorkoutExercise {
  exercise: Exercise!
  id: ID!
  maxReps: Int!
  minReps: Int!
  sets: Int!
}
